{"ast":null,"code":"var _jsxFileName = \"/media/devmod/main/microverse/react/bookstore-cms/client/src/containers/book-list.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Book from '../components/book';\nimport { removeBookAction, getBooksAction } from '../actions/index';\n\nclass BookList extends React.Component {\n  UNSAFE_componentWillMount() {\n    this.props.getBooks();\n  }\n\n  render() {\n    const _this$props = this.props,\n          books = _this$props.books,\n          handleRemoveBook = _this$props.handleRemoveBook;\n    console.log(books);\n    return React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, books.length > 0 ? books.map(book => React.createElement(Book, {\n      key: book.id,\n      item: book,\n      handleRemoval: handleRemoveBook,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    })) : React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Empty List\")));\n  }\n\n}\n\nconst displayableBooks = (books, theFilter) => {\n  if (theFilter === 'All') {\n    return books;\n  }\n\n  return books.filter(item => item.category === theFilter);\n}; // inject store state as props to Booklist component\n\n\nconst mapStateToProps = state => {\n  return {\n    books: displayableBooks(state.books, state.filter)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  handleRemoveBook: book => {\n    dispatch(removeBookAction(book));\n  },\n  getBooks: state => {\n    dispatch(getBooksAction(state));\n  }\n});\n\nBookList = connect(mapStateToProps, mapDispatchToProps)(BookList);\nexport default BookList;","map":{"version":3,"sources":["/media/devmod/main/microverse/react/bookstore-cms/client/src/containers/book-list.js"],"names":["React","connect","Book","removeBookAction","getBooksAction","BookList","Component","UNSAFE_componentWillMount","props","getBooks","render","books","handleRemoveBook","console","log","length","map","book","id","displayableBooks","theFilter","filter","item","category","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,kBAAjD;;AAEA,MAAMC,QAAN,SAAuBL,KAAK,CAACM,SAA7B,CAAuC;AAGrCC,EAAAA,yBAAyB,GAAG;AAC1B,SAAKC,KAAL,CAAWC,QAAX;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAAA,wBAC6B,KAAKF,KADlC;AAAA,UACCG,KADD,eACCA,KADD;AAAA,UACQC,gBADR,eACQA,gBADR;AAEPC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,KAAK,CAACI,MAAN,GAAe,CAAf,GAAmBJ,KAAK,CAACK,GAAN,CAAWC,IAAD,IAC5B,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAhB;AAAoB,MAAA,IAAI,EAAED,IAA1B;AAAgC,MAAA,aAAa,EAAEL,gBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADkB,CAAnB,GAIG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CALN,CADF;AAYD;;AAtBoC;;AAyBvC,MAAMO,gBAAgB,GAAG,CAACR,KAAD,EAAQS,SAAR,KAAsB;AAC7C,MAAIA,SAAS,KAAK,KAAlB,EAAyB;AACvB,WAAOT,KAAP;AACD;;AACD,SAAOA,KAAK,CAACU,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkBH,SAAvC,CAAP;AACD,CALD,C,CAOA;;;AACA,MAAMI,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLd,IAAAA,KAAK,EAAEQ,gBAAgB,CAACM,KAAK,CAACd,KAAP,EAAcc,KAAK,CAACJ,MAApB;AADlB,GAAP;AAGD,CAJD;;AAMA,MAAMK,kBAAkB,GAAIC,QAAD,KAAe;AACxCf,EAAAA,gBAAgB,EAAGK,IAAD,IAAU;AAC1BU,IAAAA,QAAQ,CAACxB,gBAAgB,CAACc,IAAD,CAAjB,CAAR;AACD,GAHuC;AAIxCR,EAAAA,QAAQ,EAAGgB,KAAD,IAAW;AACnBE,IAAAA,QAAQ,CAACvB,cAAc,CAACqB,KAAD,CAAf,CAAR;AACD;AANuC,CAAf,CAA3B;;AAUApB,QAAQ,GAAGJ,OAAO,CAACuB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CrB,QAA7C,CAAX;AAEA,eAAeA,QAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Book from '../components/book';\nimport { removeBookAction, getBooksAction } from '../actions/index';\n\nclass BookList extends React.Component {\n\n\n  UNSAFE_componentWillMount() {\n    this.props.getBooks();\n  }\n\n  render() {\n    const { books, handleRemoveBook } = this.props;\n    console.log(books)\n    return (\n      <tbody>\n        {books.length > 0 ? books.map((book) => (\n          <Book key={book.id} item={book} handleRemoval={handleRemoveBook} />\n        ))\n          : (\n            <tr>\n              <td>Empty List</td>\n            </tr>\n          )}\n      </tbody>\n    );\n  }\n}\n\nconst displayableBooks = (books, theFilter) => {\n  if (theFilter === 'All') {\n    return books;\n  }\n  return books.filter(item => item.category === theFilter);\n};\n\n// inject store state as props to Booklist component\nconst mapStateToProps = (state) => {\n  return {\n    books: displayableBooks(state.books, state.filter),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleRemoveBook: (book) => {\n    dispatch(removeBookAction(book));\n  },\n  getBooks: (state) => {\n    dispatch(getBooksAction(state));\n  }\n});\n\n\nBookList = connect(mapStateToProps, mapDispatchToProps)(BookList);\n\nexport default BookList;\n"]},"metadata":{},"sourceType":"module"}