{"ast":null,"code":"import _defineProperty from \"/media/devmod/main/microverse/react/bookstore-cms/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/media/devmod/main/microverse/react/bookstore-cms/src/components/book-form.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { creatBookAction, removeBookAction } from '../actions/index';\nconst categories = ['Action', 'Biography', 'History', 'Horror', 'Kids', 'Learning', 'Sci-Fi'];\nlet identifier = 0;\n\nclass BookForm extends React.Component {\n  constructor(props) {\n    super(props); //this.handleFormSubmit = this.handleFormSubmit.bind(this);\n\n    this.handleFormSubmit = e => {\n      e.preventDefault();\n      const handleAdding = this.props.handleAdding;\n      /* const book = {\n         id: identifier,\n         title: this.titleInput.value,\n         category: categories[this.categoryValue.options.selectedIndex],\n       };\n       identifier += 1;\n       handleAdding(book);\n       this.titleInput.value = '';\n       this.categoryValue.options.selectedIndex = 0;*/\n\n      console.log(this.state);\n      handleAdding(Object.assign({}, this.state, {\n        id: identifier\n      }));\n      identifier++;\n      this.setState({\n        title: '',\n        category: 'Action'\n      });\n    };\n\n    this.handleChange = e => {\n      const target = e.target,\n            value = e.value;\n\n      switch (target.localName) {\n        case 'input':\n          this.setState(state => ({\n            input: value,\n            category: state.category\n          }));\n          break;\n\n        default:\n          this.setState(state => _objectSpread({\n            input: state.input,\n            category: value\n          }, state));\n          break;\n      }\n    };\n\n    this.state = {\n      title: '',\n      category: ''\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.handleFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Book Title\"), React.createElement(\"input\", {\n      ref: node => {\n        this.titleInput = node;\n      },\n      onChange: this.handleChange,\n      type: \"text\",\n      id: \"title\",\n      value: this.state.input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"ctg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Book Category\"), React.createElement(\"select\", {\n      name: \"category\",\n      id: \"ctg\",\n      ref: node => {\n        this.categoryValue = node;\n      },\n      onChange: this.handleChange,\n      value: this.state.category,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, categories.map(item => React.createElement(\"option\", {\n      key: item,\n      value: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, item)))), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \" Submit \"));\n  }\n\n} // connect bookForm component to dispatch\n\n\nconst mapDispatchToProps = dispatch => ({\n  handleAdding: book => {\n    dispatch(creatBookAction(book));\n  }\n});\n\nBookForm = connect(null, mapDispatchToProps)(BookForm);\nexport default BookForm;","map":{"version":3,"sources":["/media/devmod/main/microverse/react/bookstore-cms/src/components/book-form.js"],"names":["React","connect","creatBookAction","removeBookAction","categories","identifier","BookForm","Component","constructor","props","handleFormSubmit","e","preventDefault","handleAdding","console","log","state","Object","assign","id","setState","title","category","handleChange","target","value","localName","input","render","node","titleInput","categoryValue","map","item","mapDispatchToProps","dispatch","book"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { creatBookAction, removeBookAction } from '../actions/index';\n\nconst categories = ['Action', 'Biography', 'History', 'Horror', 'Kids', 'Learning', 'Sci-Fi'];\nlet identifier = 0;\n\nclass BookForm extends React.Component {\n  constructor(props) {\n    super(props);\n    //this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.state = {\n      title: '',\n      category: '',\n    }\n  }\n\n  handleFormSubmit = (e) => {\n    e.preventDefault();\n    const { handleAdding } = this.props;\n    /* const book = {\n       id: identifier,\n       title: this.titleInput.value,\n       category: categories[this.categoryValue.options.selectedIndex],\n     };\n     identifier += 1;\n     handleAdding(book);\n     this.titleInput.value = '';\n     this.categoryValue.options.selectedIndex = 0;*/\n    console.log(this.state)\n    handleAdding(Object.assign({}, this.state, { id: identifier }));\n    identifier++;\n    this.setState({\n      title: '',\n      category: 'Action',\n    });\n  }\n\n  handleChange = (e) => {\n    const { target, value } = e\n    switch (target.localName) {\n      case 'input':\n        this.setState((state) => ({\n          input: value,\n          category: state.category\n        }));\n        break;\n      default:\n        this.setState((state) => ({\n          input: state.input,\n          category: value, ...state\n        }));\n        break;\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleFormSubmit}>\n        <div>\n          <label htmlFor=\"title\">Book Title</label>\n          <input ref={(node) => { this.titleInput = node; }} onChange={this.handleChange} type=\"text\" id=\"title\" value={this.state.input} />\n        </div>\n        <div>\n          <label htmlFor=\"ctg\">Book Category</label>\n          <select name=\"category\" id=\"ctg\" ref={(node) => { this.categoryValue = node; }} onChange={this.handleChange} value={this.state.category}>\n            {categories.map((item) => <option key={item} value={item}>{item}</option>)}\n          </select>\n        </div>\n        <button type=\"submit\" > Submit </button>\n      </form>\n    );\n  }\n}\n\n// connect bookForm component to dispatch\nconst mapDispatchToProps = (dispatch) => ({\n  handleAdding: (book) => {\n    dispatch(creatBookAction(book));\n  },\n});\n\nBookForm = connect(null, mapDispatchToProps)(BookForm);\n\nexport default BookForm;\n"]},"metadata":{},"sourceType":"module"}