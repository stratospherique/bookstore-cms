{"ast":null,"code":"var _jsxFileName = \"/media/devmod/main/microverse/react/bookstore-cms/src/components/book-list.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Book from './book';\nimport { connect } from 'react-redux';\n\nclass BookList extends React.Component {\n  componentDidMount() {\n    this.unsubscribe = this.props.subscribe();\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    const books = this.props.books;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"BookID\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Title\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Category\")), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, books.length > 0 ? books.map(book => {\n      return React.createElement(Book, {\n        item: book,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      });\n    }) : React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"Empty List\"))));\n  }\n\n}\n/*BookList.contextTypes = {\n  store: PropTypes.object.isRequired\n}*/\n\n\nconst mapStateToProps = state => {\n  return {\n    books: state.books\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    subscribe: () => {\n      dispatch(() => {\n        this.forceUpdate();\n      });\n    }\n  };\n};\n\nBookList = connect(mapStateToProps, null)(BookList);\nexport default BookList;","map":{"version":3,"sources":["/media/devmod/main/microverse/react/bookstore-cms/src/components/book-list.js"],"names":["React","PropTypes","Book","connect","BookList","Component","componentDidMount","unsubscribe","props","subscribe","componentWillUnmount","render","books","length","map","book","mapStateToProps","state","mapDispatchToProps","dispatch","forceUpdate"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,QAAN,SAAuBJ,KAAK,CAACK,SAA7B,CAAuC;AAErCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,WAAL,GAAmB,KAAKC,KAAL,CAAWC,SAAX,EAAnB;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKH,WAAL;AACD;;AAEDI,EAAAA,MAAM,GAAG;AAAA,UACCC,KADD,GACW,KAAKJ,KADhB,CACCI,KADD;AAEP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,CADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,KAAK,CAACC,MAAN,GAAe,CAAf,GAAmBD,KAAK,CAACE,GAAN,CAAWC,IAAD,IAAU;AACtC,aAAO,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFmB,CAAnB,GAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHP,CANF,CADF,CADF;AAgBD;;AA5BoC;AA+BvC;;;;;AAIA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLL,IAAAA,KAAK,EAAEK,KAAK,CAACL;AADR,GAAP;AAGD,CAJD;;AAMA,MAAMM,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLV,IAAAA,SAAS,EAAE,MAAM;AACfU,MAAAA,QAAQ,CAAC,MAAM;AACb,aAAKC,WAAL;AACD,OAFO,CAAR;AAGD;AALI,GAAP;AAOD,CARD;;AAYAhB,QAAQ,GAAGD,OAAO,CAACa,eAAD,EAAkB,IAAlB,CAAP,CAA+BZ,QAA/B,CAAX;AAEA,eAAeA,QAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Book from './book';\nimport { connect } from 'react-redux';\n\nclass BookList extends React.Component {\n\n  componentDidMount() {\n    this.unsubscribe = this.props.subscribe();\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    const { books } = this.props\n    return (\n      <div>\n        <table>\n          <thead>\n            <th>BookID</th>\n            <th>Title</th>\n            <th>Category</th>\n          </thead>\n          <tbody>\n            {books.length > 0 ? books.map((book) => {\n              return <Book item={book} />\n            }) : <tr>Empty List</tr>}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\n/*BookList.contextTypes = {\n  store: PropTypes.object.isRequired\n}*/\n\nconst mapStateToProps = (state) => {\n  return {\n    books: state.books\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    subscribe: () => {\n      dispatch(() => {\n        this.forceUpdate();\n      })\n    }\n  }\n}\n\n\n\nBookList = connect(mapStateToProps, null)(BookList)\n\nexport default BookList"]},"metadata":{},"sourceType":"module"}