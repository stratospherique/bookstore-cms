{"ast":null,"code":"var _jsxFileName = \"/media/devmod/main/microverse/react/bookstore-cms/src/containers/book-list.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Book from '../components/book';\nimport { removeBookAction } from '../actions/index';\n\nlet BookList = ({\n  books,\n  handleRemoveBook\n}) => React.createElement(\"tr\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}, books.length > 0 ? books.map(book => React.createElement(Book, {\n  key: book.id,\n  item: book,\n  handleRemoval: handleRemoveBook,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n})) : React.createElement(\"td\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, \"Empty List\"));\n\nconst displayableBooks = (books, theFilter) => {\n  if (theFilter === 'All') {\n    return books;\n  }\n\n  return books.filter(item => item.category === theFilter);\n}; // inject store state as props to Booklist component\n\n\nconst mapStateToProps = state => ({\n  books: displayableBooks(state.books, state.filter)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleRemoveBook: book => {\n    dispatch(removeBookAction(book));\n  }\n});\n\nBookList = connect(mapStateToProps, mapDispatchToProps)(BookList);\nexport default BookList;","map":{"version":3,"sources":["/media/devmod/main/microverse/react/bookstore-cms/src/containers/book-list.js"],"names":["React","connect","Book","removeBookAction","BookList","books","handleRemoveBook","length","map","book","id","displayableBooks","theFilter","filter","item","category","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;;AAEA,IAAIC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGD,KAAK,CAACE,MAAN,GAAe,CAAf,GAAmBF,KAAK,CAACG,GAAN,CAAWC,IAAD,IAC5B,oBAAC,IAAD;AAAM,EAAA,GAAG,EAAEA,IAAI,CAACC,EAAhB;AAAoB,EAAA,IAAI,EAAED,IAA1B;AAAgC,EAAA,aAAa,EAAEH,gBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADkB,CAAnB,GAIG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALN,CADF;;AAWA,MAAMK,gBAAgB,GAAG,CAACN,KAAD,EAAQO,SAAR,KAAsB;AAC7C,MAAIA,SAAS,KAAK,KAAlB,EAAyB;AACvB,WAAOP,KAAP;AACD;;AACD,SAAOA,KAAK,CAACQ,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkBH,SAAvC,CAAP;AACD,CALD,C,CAOA;;;AACA,MAAMI,eAAe,GAAIC,KAAD,KAAY;AAClCZ,EAAAA,KAAK,EAAEM,gBAAgB,CAACM,KAAK,CAACZ,KAAP,EAAcY,KAAK,CAACJ,MAApB;AADW,CAAZ,CAAxB;;AAIA,MAAMK,kBAAkB,GAAIC,QAAD,KAAe;AACxCb,EAAAA,gBAAgB,EAAGG,IAAD,IAAU;AAC1BU,IAAAA,QAAQ,CAAChB,gBAAgB,CAACM,IAAD,CAAjB,CAAR;AACD;AAHuC,CAAf,CAA3B;;AAOAL,QAAQ,GAAGH,OAAO,CAACe,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cd,QAA7C,CAAX;AAEA,eAAeA,QAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Book from '../components/book';\nimport { removeBookAction } from '../actions/index';\n\nlet BookList = ({ books, handleRemoveBook }) => (\n  <tr>\n    {books.length > 0 ? books.map((book) => (\n      <Book key={book.id} item={book} handleRemoval={handleRemoveBook} />\n    ))\n      : (\n        <td>Empty List</td>\n      )}\n  </tr>\n);\n\nconst displayableBooks = (books, theFilter) => {\n  if (theFilter === 'All') {\n    return books;\n  }\n  return books.filter(item => item.category === theFilter);\n};\n\n// inject store state as props to Booklist component\nconst mapStateToProps = (state) => ({\n  books: displayableBooks(state.books, state.filter),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleRemoveBook: (book) => {\n    dispatch(removeBookAction(book));\n  },\n});\n\n\nBookList = connect(mapStateToProps, mapDispatchToProps)(BookList);\n\nexport default BookList;\n"]},"metadata":{},"sourceType":"module"}