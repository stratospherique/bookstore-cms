{"ast":null,"code":"var _jsxFileName = \"/media/devmod/main/microverse/react/bookstore-cms/src/components/book-form.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { creatBookAction, removeBookAction } from '../actions/index';\nconst categories = ['Action', 'Biography', 'History', 'Horror', 'Kids', 'Learning', 'Sci-Fi'];\nlet identifier = 0;\n\nclass BookForm extends React.Component {\n  constructor(props) {\n    super(props); //this.handleFormSubmit = this.handleFormSubmit.bind(this);\n\n    this.handleFormSubmit = e => {\n      e.preventDefault();\n      console.log(this.state);\n      const handleAdding = this.props.handleAdding;\n      const book = {\n        id: identifier,\n        title: this.titleInput.value,\n        category: categories[this.categoryValue.options.selectedIndex]\n      };\n      identifier += 1;\n      handleAdding(book);\n      this.titleInput.value = '';\n      this.categoryValue.options.selectedIndex = 0;\n    };\n\n    this.state = {\n      title: '',\n      category: ''\n    };\n  }\n\n  handleChange(e) {\n    switch (e.target.localName) {\n      case 'input':\n        this.setState(state => Object.assign({}, state, {\n          input: e.target.value\n        }));\n        break;\n\n      default:\n        this.setState(state => Object.assign({}, state, {\n          category: categories[e.target.categoryValue.options.selectedIndex]\n        }));\n        break;\n    }\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.handleFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Book Title\"), React.createElement(\"input\", {\n      ref: node => {\n        this.titleInput = node;\n      },\n      onChange: this.handleChange,\n      type: \"text\",\n      id: \"title\",\n      value: this.state.input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"ctg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Book Category\"), React.createElement(\"select\", {\n      name: \"category\",\n      id: \"ctg\",\n      ref: node => {\n        this.categoryValue = node;\n      },\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, categories.map(item => React.createElement(\"option\", {\n      key: item,\n      value: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, item)))), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \" Submit \"));\n  }\n\n} // connect bookForm component to dispatch\n\n\nconst mapDispatchToProps = dispatch => ({\n  handleAdding: book => {\n    dispatch(creatBookAction(book));\n  }\n});\n\nBookForm = connect(null, mapDispatchToProps)(BookForm);\nexport default BookForm;","map":{"version":3,"sources":["/media/devmod/main/microverse/react/bookstore-cms/src/components/book-form.js"],"names":["React","connect","creatBookAction","removeBookAction","categories","identifier","BookForm","Component","constructor","props","handleFormSubmit","e","preventDefault","console","log","state","handleAdding","book","id","title","titleInput","value","category","categoryValue","options","selectedIndex","handleChange","target","localName","setState","Object","assign","input","render","node","map","item","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,EAA0BC,gBAA1B,QAAkD,kBAAlD;AAEA,MAAMC,UAAU,GAAG,CAAC,QAAD,EAAW,WAAX,EAAwB,SAAxB,EAAmC,QAAnC,EAA6C,MAA7C,EAAqD,UAArD,EAAiE,QAAjE,CAAnB;AACA,IAAIC,UAAU,GAAG,CAAjB;;AAEA,MAAMC,QAAN,SAAuBN,KAAK,CAACO,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;;AAFiB,SASnBC,gBATmB,GASCC,CAAD,IAAO;AACxBA,MAAAA,CAAC,CAACC,cAAF;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AAFwB,YAGhBC,YAHgB,GAGC,KAAKP,KAHN,CAGhBO,YAHgB;AAIxB,YAAMC,IAAI,GAAG;AACXC,QAAAA,EAAE,EAAEb,UADO;AAEXc,QAAAA,KAAK,EAAE,KAAKC,UAAL,CAAgBC,KAFZ;AAGXC,QAAAA,QAAQ,EAAElB,UAAU,CAAC,KAAKmB,aAAL,CAAmBC,OAAnB,CAA2BC,aAA5B;AAHT,OAAb;AAKApB,MAAAA,UAAU,IAAI,CAAd;AACAW,MAAAA,YAAY,CAACC,IAAD,CAAZ;AACA,WAAKG,UAAL,CAAgBC,KAAhB,GAAwB,EAAxB;AACA,WAAKE,aAAL,CAAmBC,OAAnB,CAA2BC,aAA3B,GAA2C,CAA3C;AACD,KAtBkB;;AAGjB,SAAKV,KAAL,GAAa;AACXI,MAAAA,KAAK,EAAE,EADI;AAEXG,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAID;;AAiBDI,EAAAA,YAAY,CAACf,CAAD,EAAI;AACd,YAAQA,CAAC,CAACgB,MAAF,CAASC,SAAjB;AACE,WAAK,OAAL;AACE,aAAKC,QAAL,CAAed,KAAD,IAAYe,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhB,KAAlB,EAAyB;AAAEiB,UAAAA,KAAK,EAAErB,CAAC,CAACgB,MAAF,CAASN;AAAlB,SAAzB,CAA1B;AACA;;AACF;AACE,aAAKQ,QAAL,CAAed,KAAD,IAAYe,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhB,KAAlB,EAAyB;AAAEO,UAAAA,QAAQ,EAAElB,UAAU,CAACO,CAAC,CAACgB,MAAF,CAASJ,aAAT,CAAuBC,OAAvB,CAA+BC,aAAhC;AAAtB,SAAzB,CAA1B;AACA;AANJ;AAQD;;AAEDQ,EAAAA,MAAM,GAAG;AACP,WACE;AAAM,MAAA,QAAQ,EAAE,KAAKvB,gBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAO,MAAA,GAAG,EAAGwB,IAAD,IAAU;AAAE,aAAKd,UAAL,GAAkBc,IAAlB;AAAyB,OAAjD;AAAmD,MAAA,QAAQ,EAAE,KAAKR,YAAlE;AAAgF,MAAA,IAAI,EAAC,MAArF;AAA4F,MAAA,EAAE,EAAC,OAA/F;AAAuG,MAAA,KAAK,EAAE,KAAKX,KAAL,CAAWiB,KAAzH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AAAQ,MAAA,IAAI,EAAC,UAAb;AAAwB,MAAA,EAAE,EAAC,KAA3B;AAAiC,MAAA,GAAG,EAAGE,IAAD,IAAU;AAAE,aAAKX,aAAL,GAAqBW,IAArB;AAA4B,OAA9E;AAAgF,MAAA,QAAQ,EAAE,KAAKR,YAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGtB,UAAU,CAAC+B,GAAX,CAAgBC,IAAD,IAAU;AAAQ,MAAA,GAAG,EAAEA,IAAb;AAAmB,MAAA,KAAK,EAAEA,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCA,IAAjC,CAAzB,CADH,CAFF,CALF,EAWE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXF,CADF;AAeD;;AApDoC,C,CAuDvC;;;AACA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCtB,EAAAA,YAAY,EAAGC,IAAD,IAAU;AACtBqB,IAAAA,QAAQ,CAACpC,eAAe,CAACe,IAAD,CAAhB,CAAR;AACD;AAHuC,CAAf,CAA3B;;AAMAX,QAAQ,GAAGL,OAAO,CAAC,IAAD,EAAOoC,kBAAP,CAAP,CAAkC/B,QAAlC,CAAX;AAEA,eAAeA,QAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { creatBookAction, removeBookAction } from '../actions/index';\n\nconst categories = ['Action', 'Biography', 'History', 'Horror', 'Kids', 'Learning', 'Sci-Fi'];\nlet identifier = 0;\n\nclass BookForm extends React.Component {\n  constructor(props) {\n    super(props);\n    //this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.state = {\n      title: '',\n      category: ''\n    }\n  }\n\n  handleFormSubmit = (e) => {\n    e.preventDefault();\n    console.log(this.state)\n    const { handleAdding } = this.props;\n    const book = {\n      id: identifier,\n      title: this.titleInput.value,\n      category: categories[this.categoryValue.options.selectedIndex],\n    };\n    identifier += 1;\n    handleAdding(book);\n    this.titleInput.value = '';\n    this.categoryValue.options.selectedIndex = 0;\n  }\n\n  handleChange(e) {\n    switch (e.target.localName) {\n      case 'input':\n        this.setState((state) => (Object.assign({}, state, { input: e.target.value })));\n        break;\n      default:\n        this.setState((state) => (Object.assign({}, state, { category: categories[e.target.categoryValue.options.selectedIndex] })));\n        break;\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleFormSubmit}>\n        <div>\n          <label htmlFor=\"title\">Book Title</label>\n          <input ref={(node) => { this.titleInput = node; }} onChange={this.handleChange} type=\"text\" id=\"title\" value={this.state.input} />\n        </div>\n        <div>\n          <label htmlFor=\"ctg\">Book Category</label>\n          <select name=\"category\" id=\"ctg\" ref={(node) => { this.categoryValue = node; }} onChange={this.handleChange}>\n            {categories.map((item) => <option key={item} value={item}>{item}</option>)}\n          </select>\n        </div>\n        <button type=\"submit\" > Submit </button>\n      </form>\n    );\n  }\n}\n\n// connect bookForm component to dispatch\nconst mapDispatchToProps = (dispatch) => ({\n  handleAdding: (book) => {\n    dispatch(creatBookAction(book));\n  },\n});\n\nBookForm = connect(null, mapDispatchToProps)(BookForm);\n\nexport default BookForm;\n"]},"metadata":{},"sourceType":"module"}