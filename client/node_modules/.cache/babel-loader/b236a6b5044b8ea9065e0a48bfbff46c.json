{"ast":null,"code":"var _jsxFileName = \"/media/devmod/main/microverse/react/bookstore-cms/client/src/containers/book-list.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Book from '../components/book';\nimport { removeBookAction, getBooksAction } from '../actions/index';\n\nclass BookList extends React.Component {\n  componentWillMount() {}\n\n  render() {\n    const _this$props = this.props,\n          getBooks = _this$props.getBooks,\n          handleRemoveBook = _this$props.handleRemoveBook; //console.log(books);\n\n    const books = getBooks();\n    return React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, books.length > 0 ? books.map(book => React.createElement(Book, {\n      key: book.id,\n      item: book,\n      handleRemoval: handleRemoveBook,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    })) : React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Empty List\")));\n  }\n\n}\n/*\nlet BookList = ({ books, handleRemoveBook }) => (\n  <tbody>\n    {books.length > 0 ? books.map((book) => (\n      <Book key={book.id} item={book} handleRemoval={handleRemoveBook} />\n    ))\n      : (\n        <tr>\n          <td>Empty List</td>\n        </tr>\n      )}\n  </tbody>\n);\n*/\n\n\nconst displayableBooks = (books, theFilter) => {\n  if (theFilter === 'All') {\n    return books;\n  }\n\n  return books.filter(item => item.category === theFilter);\n}; // inject store state as props to Booklist component\n\n/*const mapStateToProps = (state, ownProps) => {\n  //books: displayableBooks(state.books, state.filter),\n\n};*/\n\n\nconst mapDispatchToProps = dispatch => ({\n  handleRemoveBook: book => {\n    dispatch(removeBookAction(book));\n  },\n  getBooks: () => dispatch(getBooksAction())\n});\n\nBookList = connect(null, mapDispatchToProps)(BookList);\nexport default BookList;","map":{"version":3,"sources":["/media/devmod/main/microverse/react/bookstore-cms/client/src/containers/book-list.js"],"names":["React","connect","Book","removeBookAction","getBooksAction","BookList","Component","componentWillMount","render","props","getBooks","handleRemoveBook","books","length","map","book","id","displayableBooks","theFilter","filter","item","category","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,kBAAjD;;AAEA,MAAMC,QAAN,SAAuBL,KAAK,CAACM,SAA7B,CAAuC;AAErCC,EAAAA,kBAAkB,GAAG,CAEpB;;AAEDC,EAAAA,MAAM,GAAG;AAAA,wBACgC,KAAKC,KADrC;AAAA,UACCC,QADD,eACCA,QADD;AAAA,UACWC,gBADX,eACWA,gBADX,EAEP;;AACA,UAAMC,KAAK,GAAGF,QAAQ,EAAtB;AAEA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGE,KAAK,CAACC,MAAN,GAAe,CAAf,GAAmBD,KAAK,CAACE,GAAN,CAAWC,IAAD,IAC5B,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAhB;AAAoB,MAAA,IAAI,EAAED,IAA1B;AAAgC,MAAA,aAAa,EAAEJ,gBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADkB,CAAnB,GAIG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CALN,CADF;AAYD;;AAvBoC;AAyBvC;;;;;;;;;;;;;;;;AAcA,MAAMM,gBAAgB,GAAG,CAACL,KAAD,EAAQM,SAAR,KAAsB;AAC7C,MAAIA,SAAS,KAAK,KAAlB,EAAyB;AACvB,WAAON,KAAP;AACD;;AACD,SAAOA,KAAK,CAACO,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkBH,SAAvC,CAAP;AACD,CALD,C,CAOA;;AACA;;;;;;AAKA,MAAMI,kBAAkB,GAAIC,QAAD,KAAe;AACxCZ,EAAAA,gBAAgB,EAAGI,IAAD,IAAU;AAC1BQ,IAAAA,QAAQ,CAACpB,gBAAgB,CAACY,IAAD,CAAjB,CAAR;AACD,GAHuC;AAIxCL,EAAAA,QAAQ,EAAE,MAAMa,QAAQ,CAACnB,cAAc,EAAf;AAJgB,CAAf,CAA3B;;AAQAC,QAAQ,GAAGJ,OAAO,CAAC,IAAD,EAAOqB,kBAAP,CAAP,CAAkCjB,QAAlC,CAAX;AAEA,eAAeA,QAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Book from '../components/book';\nimport { removeBookAction, getBooksAction } from '../actions/index';\n\nclass BookList extends React.Component {\n\n  componentWillMount() {\n\n  }\n\n  render() {\n    const { getBooks, handleRemoveBook } = this.props;\n    //console.log(books);\n    const books = getBooks()\n\n    return (\n      <tbody>\n        {books.length > 0 ? books.map((book) => (\n          <Book key={book.id} item={book} handleRemoval={handleRemoveBook} />\n        ))\n          : (\n            <tr>\n              <td>Empty List</td>\n            </tr>\n          )}\n      </tbody>\n    );\n  }\n}\n/*\nlet BookList = ({ books, handleRemoveBook }) => (\n  <tbody>\n    {books.length > 0 ? books.map((book) => (\n      <Book key={book.id} item={book} handleRemoval={handleRemoveBook} />\n    ))\n      : (\n        <tr>\n          <td>Empty List</td>\n        </tr>\n      )}\n  </tbody>\n);\n*/\nconst displayableBooks = (books, theFilter) => {\n  if (theFilter === 'All') {\n    return books;\n  }\n  return books.filter(item => item.category === theFilter);\n};\n\n// inject store state as props to Booklist component\n/*const mapStateToProps = (state, ownProps) => {\n  //books: displayableBooks(state.books, state.filter),\n\n};*/\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleRemoveBook: (book) => {\n    dispatch(removeBookAction(book));\n  },\n  getBooks: () => dispatch(getBooksAction()),\n});\n\n\nBookList = connect(null, mapDispatchToProps)(BookList);\n\nexport default BookList;\n"]},"metadata":{},"sourceType":"module"}