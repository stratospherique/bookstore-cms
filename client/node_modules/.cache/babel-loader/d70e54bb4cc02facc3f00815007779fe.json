{"ast":null,"code":"var _jsxFileName = \"/media/devmod/main/microverse/react/bookstore-cms/client/src/containers/book-list.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport Book from '../components/book';\nimport { removeBookAction, getBooksAction } from '../actions/index';\n\nclass BookList extends React.Component {\n  UNSAFE_componentWillMount() {\n    this.props.getBooks();\n  }\n\n  render() {\n    const _this$props = this.props,\n          books = _this$props.books,\n          handleRemoveBook = _this$props.handleRemoveBook;\n    return React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, books.length > 0 ? books.map(book => React.createElement(Book, {\n      key: book.id,\n      item: book,\n      handleRemoval: handleRemoveBook,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    })) : React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Empty List\")));\n  }\n\n}\n\nconst displayableBooks = (books, theFilter) => {\n  if (theFilter === 'All') {\n    return books;\n  }\n\n  return books.filter(item => item.category === theFilter);\n}; // inject store state as props to Booklist component\n\n\nconst mapStateToProps = state => {\n  return {\n    books: displayableBooks(state.books, state.filter)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  handleRemoveBook: book => {\n    axios.delete('api/v1/books/' + book.id).then(response => {\n      dispatch(removeBookAction(book));\n    });\n  },\n  getBooks: () => {\n    axios.get('api/v1/books').then(response => {\n      dispatch(getBooksAction(response.data.map(item => {\n        const id = item.id,\n              title = item.title,\n              author = item.author,\n              category = item.category;\n        return {\n          id,\n          title,\n          author,\n          category\n        };\n      })));\n    });\n  }\n});\n\nBookList = connect(mapStateToProps, mapDispatchToProps)(BookList);\nexport default BookList;","map":{"version":3,"sources":["/media/devmod/main/microverse/react/bookstore-cms/client/src/containers/book-list.js"],"names":["React","connect","axios","Book","removeBookAction","getBooksAction","BookList","Component","UNSAFE_componentWillMount","props","getBooks","render","books","handleRemoveBook","length","map","book","id","displayableBooks","theFilter","filter","item","category","mapStateToProps","state","mapDispatchToProps","dispatch","delete","then","response","get","data","title","author"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,kBAAjD;;AAEA,MAAMC,QAAN,SAAuBN,KAAK,CAACO,SAA7B,CAAuC;AAGrCC,EAAAA,yBAAyB,GAAG;AAC1B,SAAKC,KAAL,CAAWC,QAAX;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAAA,wBAC6B,KAAKF,KADlC;AAAA,UACCG,KADD,eACCA,KADD;AAAA,UACQC,gBADR,eACQA,gBADR;AAGP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,KAAK,CAACE,MAAN,GAAe,CAAf,GAAmBF,KAAK,CAACG,GAAN,CAAWC,IAAD,IAC5B,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAhB;AAAoB,MAAA,IAAI,EAAED,IAA1B;AAAgC,MAAA,aAAa,EAAEH,gBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADkB,CAAnB,GAIG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CALN,CADF;AAYD;;AAtBoC;;AAyBvC,MAAMK,gBAAgB,GAAG,CAACN,KAAD,EAAQO,SAAR,KAAsB;AAC7C,MAAIA,SAAS,KAAK,KAAlB,EAAyB;AACvB,WAAOP,KAAP;AACD;;AACD,SAAOA,KAAK,CAACQ,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkBH,SAAvC,CAAP;AACD,CALD,C,CAOA;;;AACA,MAAMI,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLZ,IAAAA,KAAK,EAAEM,gBAAgB,CAACM,KAAK,CAACZ,KAAP,EAAcY,KAAK,CAACJ,MAApB;AADlB,GAAP;AAGD,CAJD;;AAMA,MAAMK,kBAAkB,GAAIC,QAAD,KAAe;AACxCb,EAAAA,gBAAgB,EAAGG,IAAD,IAAU;AAC1Bd,IAAAA,KAAK,CAACyB,MAAN,CAAa,kBAAkBX,IAAI,CAACC,EAApC,EAAwCW,IAAxC,CAA6CC,QAAQ,IAAI;AACvDH,MAAAA,QAAQ,CAACtB,gBAAgB,CAACY,IAAD,CAAjB,CAAR;AACD,KAFD;AAGD,GALuC;AAMxCN,EAAAA,QAAQ,EAAE,MAAM;AACdR,IAAAA,KAAK,CAAC4B,GAAN,CAAU,cAAV,EAA0BF,IAA1B,CAA+BC,QAAQ,IAAI;AACzCH,MAAAA,QAAQ,CAACrB,cAAc,CAACwB,QAAQ,CAACE,IAAT,CAAchB,GAAd,CAAkBM,IAAI,IAAI;AAAA,cACxCJ,EADwC,GACRI,IADQ,CACxCJ,EADwC;AAAA,cACpCe,KADoC,GACRX,IADQ,CACpCW,KADoC;AAAA,cAC7BC,MAD6B,GACRZ,IADQ,CAC7BY,MAD6B;AAAA,cACrBX,QADqB,GACRD,IADQ,CACrBC,QADqB;AAEhD,eAAO;AAAEL,UAAAA,EAAF;AAAMe,UAAAA,KAAN;AAAaC,UAAAA,MAAb;AAAqBX,UAAAA;AAArB,SAAP;AACD,OAHuB,CAAD,CAAf,CAAR;AAID,KALD;AAMD;AAbuC,CAAf,CAA3B;;AAiBAhB,QAAQ,GAAGL,OAAO,CAACsB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CnB,QAA7C,CAAX;AAEA,eAAeA,QAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport Book from '../components/book';\nimport { removeBookAction, getBooksAction } from '../actions/index';\n\nclass BookList extends React.Component {\n\n\n  UNSAFE_componentWillMount() {\n    this.props.getBooks();\n  }\n\n  render() {\n    const { books, handleRemoveBook } = this.props;\n\n    return (\n      <tbody>\n        {books.length > 0 ? books.map((book) => (\n          <Book key={book.id} item={book} handleRemoval={handleRemoveBook} />\n        ))\n          : (\n            <tr>\n              <td>Empty List</td>\n            </tr>\n          )}\n      </tbody>\n    );\n  }\n}\n\nconst displayableBooks = (books, theFilter) => {\n  if (theFilter === 'All') {\n    return books;\n  }\n  return books.filter(item => item.category === theFilter);\n};\n\n// inject store state as props to Booklist component\nconst mapStateToProps = (state) => {\n  return {\n    books: displayableBooks(state.books, state.filter),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleRemoveBook: (book) => {\n    axios.delete('api/v1/books/' + book.id).then(response => {\n      dispatch(removeBookAction(book));\n    })\n  },\n  getBooks: () => {\n    axios.get('api/v1/books').then(response => {\n      dispatch(getBooksAction(response.data.map(item => {\n        const { id, title, author, category } = item;\n        return { id, title, author, category };\n      })));\n    })\n  },\n});\n\n\nBookList = connect(mapStateToProps, mapDispatchToProps)(BookList);\n\nexport default BookList;\n"]},"metadata":{},"sourceType":"module"}